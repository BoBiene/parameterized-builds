{namespace com.kylenicholls.stash.parameterizedbuilds.hook}

/**
 * @param? config
 * @param? errors
 */
{template .view}
	<div class="parameterized-builds">
		{if $errors and $errors['jenkins-admin-error']}
				<div class="field-group"><div class="error">{$errors['jenkins-admin-error']}</div></div>
		{/if}
		{let $configKeys: $config ? keys($config) : [] /}	
		{let $visibleInputsCount: $configKeys.length > 0 ? ($configKeys.length / 6) : 1 /}
		{for $i in range($visibleInputsCount)}
			{call .addJob}
				{param canDelete: $visibleInputsCount > 1 /}
				{param count: $i /}
				{param jobName: $config and $config['jobName-' + $i] ? $config['jobName-' + $i] : null /}
				{param triggers: $config and $config['triggers-' + $i] ? $config['triggers-' + $i] : null /}
				{param token: $config and $config['token-' + $i] ? $config['token-' + $i] : null /}
				{param buildParameters: $config and $config['buildParameters-' + $i] ? $config['buildParameters-' + $i] : null /}
				{param branchRegex: $config and $config['branchRegex-' + $i] ? $config['branchRegex-' + $i] : null /}
				{param pathRegex: $config and $config['pathRegex-' + $i] ? $config['pathRegex-' + $i] : null /}
              	{param errors: $errors ? $errors : null /}
              	{param collapsed: not $errors and $configKeys.length > 0 /}
			{/call}
		{/for}
        <a id="add-job" href="#" title="Add job">
			{call aui.icons.icon}
			    {param useIconFont: true /}
			    {param size: 'small' /}
			    {param icon: 'list-add' /}
			{/call}
        </a>
	</div>
{/template}

/**
 * @param canDelete
 * @param count
 * @param jobName
 * @param triggers
 * @param token
 * @param buildParameters
 * @param branchRegex
 * @param pathRegex
 * @param errors
 * @param collapsed
 */
{template .addJob}
	<div id="job-{$count}" class="job">
		<div class="delete-job {$canDelete ? 'inline-button' : 'hidden' }">
	        <a href="#" title="Delete job">
	            {call aui.icons.icon}
				    {param useIconFont: true /}
				    {param size: 'small' /}
				    {param icon: 'remove' /}
				{/call}
	        </a>
	    </div>
		<div class="toggle-job inline-button">
			<a href="#" title="Toggle job details">
				{call aui.icons.icon}
				    {param useIconFont: true /}
				    {param size: 'small' /}
				    {param icon: $collapsed ? 'collapsed' : 'expanded' /}
				{/call}
				{if $collapsed}{$jobName}{/if}
			</a>
		</div>
	    {call aui.form.textField}
	        {param id: 'jobName-' + $count /}
	        {param value: $jobName /}
	        {param labelContent: 'Job Name' /}
        	{param errorTexts: $errors ? $errors['jobName-' + $count] : null /}
        	{param isRequired: true /}
        	{param extraClasses: $collapsed ? 'hidden' : '' /}
	    {/call}
	    <div class="field-group {$collapsed ? 'hidden' : ''}">
	    	<label for="trigger-buttons-{$count}">Triggers<span class="aui-icon icon-required"></span></label>
		    <a class="branch-created" href="#" title="Triggers when new branches are created"><span class="aui-lozenge {strContains($triggers, 'add;') ? 'aui-lozenge-success' : ''}">Branch Created</span></a>&nbsp;
		    <a class="push-event" href="#" title="Triggers on push events"><span class="aui-lozenge {strContains($triggers, 'push;') ? 'aui-lozenge-success' : ''}">Push Event</span></a>&nbsp;
		    <a class="pull-request-event" href="#" title="Triggers when a pull request is opened, re-opend, or rescoped"><span class="aui-lozenge {strContains($triggers, 'pullrequest;') ? 'aui-lozenge-success' : ''}">Pull Request</span></a>&nbsp;
		    <a class="manual" href="#" title="Adds a build button to the branch actions menu"><span class="aui-lozenge {strContains($triggers, 'manual;') ? 'aui-lozenge-success' : ''}">Manual</span></a>&nbsp;
		    <a class="branch-deleted" href="#" title="Triggers when a branch is deleted"><span class="aui-lozenge {strContains($triggers, 'delete;') ? 'aui-lozenge-success' : ''}">Branch Deleted</span></a>
	    	{if $errors and $errors['triggers-' + $count]}<div class="error">{$errors['triggers-' + $count]}</div>{/if}
	    </div>
	    {call aui.form.textField}
	        {param id: 'triggers-' + $count /}
	        {param value: $triggers /}
	        {param labelContent: 'Triggers'  /}
	        {param extraClasses: 'hide-trigger' /}
        	{param errorTexts: $errors ? $errors['triggers-' + $count] : null /}
	    {/call}
	    {call aui.form.textField}
	        {param id: 'token-' + $count /}
	        {param value: $token /}
	        {param labelContent: 'Token' /}
	        {param descriptionText: 'Trigger builds remotely (e.g., from scripts) or leave blank to use user API token' /}
        	{param errorTexts: $errors ? $errors['token-' + $count] : null /}
        	{param extraClasses: $collapsed ? 'hidden' : '' /}
	    {/call}
	    {call aui.form.textareaField}
	        {param id: 'buildParameters-' + $count /}
	        {param value: $buildParameters /}
	        {param labelContent: 'Build Parameters'  /}
        	{param descriptionText: 'Key=Value pairs separated by new line. 
        		For choice parameters separate values with a semicolon. Available Stash variables: $BRANCH'/}
			{param rows: 3 /}
	        {param extraClass: 'long-field' /}
			{param fieldWidth: 'full-width' /}
        	{param extraClasses: $collapsed ? 'hidden' : '' /}
	    {/call}
	    {let $branchClasses}
		    {if $collapsed and not (strContains($triggers, 'add;') or strContains($triggers, 'delete;') or strContains($triggers, 'push;'))}
		    	hidden hide-branches
		    {elseif $collapsed and (strContains($triggers, 'add;') or strContains($triggers, 'delete;') or strContains($triggers, 'push;'))}
		    	hidden
		    {elseif not $collapsed and not (strContains($triggers, 'add;') or strContains($triggers, 'delete;') or strContains($triggers, 'push;'))}
		    	hide-branches
		    {/if}
	    {/let}
		{call aui.form.textField}
	        {param id: 'branchRegex-' + $count /}
	        {param value: $branchRegex /}
	        {param labelContent: 'Branches'  /}
	        {param extraClass: 'long-field' /}
			{param fieldWidth: 'full-width' /}
        	{param descriptionText: 'Trigger builds for matched branches (example: "release.*|hotfix.*|production")' /}
        	{param extraClasses: $branchClasses /}
	    {/call}
	    {let $pathClasses}
		    {if $collapsed and not (strContains($triggers, 'push;'))}
		    	hidden hide-paths
		    {elseif $collapsed and (strContains($triggers, 'push;'))}
		    	hidden
		    {elseif not $collapsed and not (strContains($triggers, 'push;'))}
		    	hide-paths
		    {/if}
	    {/let}
		{call aui.form.textField}
	        {param id: 'pathRegex-' + $count /}
	        {param value: $pathRegex /}
	        {param labelContent: 'Monitored Paths'  /}
	        {param extraClass: 'long-field' /}
			{param fieldWidth: 'full-width' /}
        	{param descriptionText: 'Trigger builds if matched files are modified (example: "directory/.*.txt|foobar/.*")' /}
        	{param extraClasses: $pathClasses /}
	    {/call}
		<hr>
    </div>
{/template}